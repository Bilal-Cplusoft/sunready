definitions:
  handler.AuthResponse:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      user: {}
    type: object
  handler.CreateCustomerRequest:
    properties:
      address:
        example: 123 Main St, San Francisco, CA 94102
        type: string
      average_monthly_bill:
        example: 150
        type: number
      city:
        example: San Francisco
        type: string
      email:
        example: john.smith@email.com
        type: string
      first_name:
        example: John
        type: string
      home_ownership_type:
        example: owner
        type: string
      last_name:
        example: Smith
        type: string
      lead_id:
        example: "12345"
        type: string
      notes:
        example: Interested in 10kW system
        type: string
      phone_number:
        example: +1-555-123-4567
        type: string
      preferred_contact_method:
        example: email
        type: string
      property_type:
        example: single_family
        type: string
      referral_code:
        example: FRIEND2024
        type: string
      roof_type:
        example: asphalt_shingle
        type: string
      state:
        example: CA
        type: string
      utility_provider:
        example: PG&E
        type: string
      zip_code:
        example: "94102"
        type: string
    type: object
  handler.ErrorResponse:
    properties:
      error:
        example: error message
        type: string
    type: object
  handler.LeadResponse:
    properties:
      house_id:
        example: 123
        type: integer
      lead_id:
        example: 42
        type: integer
      success:
        example: true
        type: boolean
    type: object
  handler.LoginRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: password123
        type: string
    type: object
  handler.MessageResponse:
    properties:
      message:
        type: string
    type: object
  handler.RegisterRequest:
    properties:
      address:
        example: 123 Main St, Anytown, USA
        type: string
      email:
        example: user@example.com
        type: string
      first_name:
        example: John
        type: string
      last_name:
        example: Doe
        type: string
      password:
        example: password123
        type: string
      phone:
        example: 555-123-4567
        type: string
      user_type:
        example: "0"
        type: string
    type: object
  handler.UpdateCustomerRequest:
    properties:
      address:
        example: 123 Main St, San Francisco, CA 94102
        type: string
      average_monthly_bill:
        example: 150
        type: number
      city:
        example: San Francisco
        type: string
      first_name:
        example: John
        type: string
      home_ownership_type:
        example: owner
        type: string
      is_active:
        example: true
        type: boolean
      last_name:
        example: Smith
        type: string
      notes:
        example: Interested in 10kW system
        type: string
      phone_number:
        example: +1-555-123-4567
        type: string
      preferred_contact_method:
        example: email
        type: string
      property_type:
        example: single_family
        type: string
      roof_type:
        example: asphalt_shingle
        type: string
      state:
        example: CA
        type: string
      status:
        example: prospect
        type: string
      utility_provider:
        example: PG&E
        type: string
      zip_code:
        example: "94102"
        type: string
    type: object
  handler.UpdateCustomerStatusRequest:
    properties:
      status:
        example: qualified
        type: string
    type: object
  models.Customer:
    properties:
      address:
        example: 123 Main St, San Francisco, CA 94102
        type: string
      average_monthly_bill:
        example: 150
        type: number
      city:
        example: San Francisco
        type: string
      created_at:
        type: string
      email:
        example: john.smith@email.com
        type: string
      first_name:
        example: John
        type: string
      home_ownership_type:
        example: owner
        type: string
      id:
        type: integer
      is_active:
        example: true
        type: boolean
      last_name:
        example: Smith
        type: string
      lead_id:
        type: integer
      notes:
        example: Interested in 10kW system
        type: string
      phone_number:
        example: +1-555-123-4567
        type: string
      preferred_contact_method:
        example: email
        type: string
      property_type:
        example: single_family
        type: string
      referral_code:
        example: FRIEND2024
        type: string
      roof_type:
        example: asphalt_shingle
        type: string
      state:
        example: CA
        type: string
      status:
        example: prospect
        type: string
      updated_at:
        type: string
      utility_provider:
        example: PG&E
        type: string
      zip_code:
        example: "94102"
        type: string
    type: object
  models.Project:
    properties:
      address:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      status:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  models.User:
    properties:
      address:
        type: string
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      phone_number:
        type: string
      updated_at:
        type: string
      user_type:
        $ref: '#/definitions/models.UserType'
    type: object
  models.UserType:
    enum:
    - 0
    - 1
    - 2
    format: int32
    type: integer
    x-enum-varnames:
    - UserTypeAdmin
    - UserTypeCustomer
    - UserTypeGeneral
  service.CreateLead:
    properties:
      address:
        example: 123 Solar St, San Francisco, CA 94102
        type: string
      city:
        type: string
      consumption:
        items:
          type: integer
        type: array
      creator_id:
        example: 1
        type: integer
      hardware_type:
        type: string
      homeowner_email:
        type: string
      homeowner_name:
        type: string
      homeowner_phone:
        type: string
      kwh_usage:
        example: 12000
        type: number
      latitude:
        example: 37.7749
        type: number
      longitude:
        example: -122.4194
        type: number
      lse_id:
        type: integer
      mode:
        type: string
      panel_count:
        example: 30
        type: integer
      period:
        type: string
      project_id:
        example: 1
        type: integer
      sales_rep_email:
        type: string
      state:
        type: string
      street:
        type: string
      system_size:
        example: 10.5
        type: number
      target_solar_offset:
        type: integer
      unit:
        type: string
      zip:
        type: string
    type: object
  service.CustomerStats:
    properties:
      cancelled:
        type: integer
      completed:
        type: integer
      contracts:
        type: integer
      installations:
        type: integer
      proposals:
        type: integer
      prospects:
        type: integer
      qualified:
        type: integer
      total:
        type: integer
    type: object
  service.QuoteInput:
    properties:
      annualProductionKWh:
        format: float64
        type: number
      annualUtilityIncrease:
        format: float64
        type: number
      costPerWatt:
        format: float64
        type: number
      electricalOffsetPct:
        format: float64
        type: number
      federalTaxCredit:
        format: float64
        type: number
      loanInterestRate:
        format: float64
        type: number
      loanTermYears:
        type: integer
      monthlyElectricBill:
        format: float64
        type: number
      panelCount:
        type: integer
      state:
        type: string
      systemSizeKW:
        format: float64
        type: number
      utilityRatePerKWh:
        format: float64
        type: number
    type: object
  service.QuoteResult:
    properties:
      annual_production_kwh:
        type: number
      break_even_year:
        type: integer
      cost_per_watt:
        type: number
      current_monthly_bill:
        type: number
      electrical_offset_pct:
        type: number
      estimated_monthly_payment:
        type: number
      estimated_new_monthly_bill:
        type: number
      federal_tax_credit:
        type: number
      first_year_savings:
        type: number
      monthly_savings:
        type: number
      panel_count:
        type: integer
      simple_payback_years:
        type: number
      summary:
        type: string
      system_cost_after_incentives:
        type: number
      system_cost_before_incentives:
        type: number
      system_size_kw:
        type: number
      twenty_five_year_savings:
        type: number
    type: object
host: localhost:8080
info:
  contact:
    email: support@sunready.com
    name: API Support
  description: API for Sun Ready project
  license:
    name: Sun Ready Private License
    url: INTERNAL
  termsOfService: http://swagger.io/terms/
  title: Sun Ready API
  version: "1.0"
paths:
  /api/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Login user
      tags:
      - auth
  /api/auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with email and password
      parameters:
      - description: Registration details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handler.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Register a new user
      tags:
      - auth
  /api/customers:
    get:
      description: Retrieves a list of customers with optional pagination and filtering
      parameters:
      - default: 50
        description: Limit number of results
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset for pagination
        in: query
        name: offset
        type: integer
      - description: Filter by status
        in: query
        name: status
        type: string
      - description: Search customers by name, email, or address
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Customer'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: List customers
      tags:
      - customers
    post:
      consumes:
      - application/json
      description: Creates a new customer in the system
      parameters:
      - description: Customer data
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/handler.CreateCustomerRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Customer'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new customer
      tags:
      - customers
  /api/customers/{id}:
    delete:
      description: Deletes a customer by ID
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete customer
      tags:
      - customers
    get:
      description: Retrieves a customer by their ID
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Customer'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get customer by ID
      tags:
      - customers
    put:
      consumes:
      - application/json
      description: Updates an existing customer
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated customer data
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/handler.UpdateCustomerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Customer'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update customer
      tags:
      - customers
  /api/customers/{id}/status:
    patch:
      consumes:
      - application/json
      description: Updates the status of a customer
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: integer
      - description: Status update
        in: body
        name: status
        required: true
        schema:
          $ref: '#/definitions/handler.UpdateCustomerStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update customer status
      tags:
      - customers
  /api/customers/stats:
    get:
      description: Retrieves customer statistics by status
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/service.CustomerStats'
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get customer statistics
      tags:
      - customers
  /api/leads:
    get:
      description: Retrieves a paginated list of leads
      parameters:
      - description: Filter by customer ID
        in: query
        name: customer_id
        type: integer
      - description: Filter by creator ID
        in: query
        name: creator_id
        type: integer
      - default: 20
        description: Number of items per page
        in: query
        name: limit
        type: integer
      - default: 0
        description: Number of items to skip
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: List leads
      tags:
      - leads
    post:
      consumes:
      - application/json
      description: Creates a new lead and optionally initiates 3D model generation
      parameters:
      - description: Lead details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/service.CreateLead'
      produces:
      - application/json
      responses:
        "201":
          description: Returns lead and house IDs
          schema:
            $ref: '#/definitions/handler.LeadResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Create a new lead
      tags:
      - leads
  /api/leads/{id}:
    delete:
      description: Deletes a lead by ID
      parameters:
      - description: Lead ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Delete a lead
      tags:
      - leads
    get:
      description: Retrieves a lead by its ID
      parameters:
      - description: Lead ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.LeadResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Get a lead by ID
      tags:
      - leads
    put:
      consumes:
      - application/json
      description: Updates an existing lead
      parameters:
      - description: Lead ID
        in: path
        name: id
        required: true
        type: integer
      - description: Lead updates
        in: body
        name: request
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.LeadResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Update a lead
      tags:
      - leads
  /api/otp/send:
    get:
      consumes:
      - application/json
      description: Sends a one-time password (OTP) via SMS to the specified phone
        number using Twilio.
      parameters:
      - description: Phone number with country code (e.g. +923001234567)
        in: query
        name: phone
        required: true
        type: string
      - description: Email Address (e.g. test@example.com)
        in: query
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OTP sent successfully
          schema:
            type: string
        "400":
          description: Missing or invalid phone parameter
          schema:
            type: string
        "500":
          description: Failed to send OTP
          schema:
            type: string
      summary: Send OTP to a phone number
      tags:
      - OTP
  /api/otp/verify:
    get:
      consumes:
      - application/json
      description: Verifies one-time passwords (OTPs) sent to both phone and email.
      parameters:
      - description: Phone number with country code (e.g. +923001234567)
        in: query
        name: phone
        required: true
        type: string
      - description: OTP code received via SMS
        in: query
        name: sms_otp
        required: true
        type: string
      - description: Email address used for OTP verification
        in: query
        name: email
        required: true
        type: string
      - description: OTP code received via Email
        in: query
        name: email_otp
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OTP verified successfully
          schema:
            $ref: '#/definitions/handler.MessageResponse'
        "400":
          description: Missing or invalid parameters / OTP verification failed
          schema:
            $ref: '#/definitions/handler.MessageResponse'
      summary: Verify phone and email OTP codes
      tags:
      - OTP
  /api/quote:
    post:
      consumes:
      - application/json
      description: Takes input parameters for a solar system and returns a detailed
        quote with costs, savings, and payback period.
      parameters:
      - description: Quote input payload
        in: body
        name: quote
        required: true
        schema:
          $ref: '#/definitions/service.QuoteInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/service.QuoteResult'
        "400":
          description: Invalid request payload
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to calculate quote
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Calculate solar quote
      tags:
      - quote
  /api/users:
    get:
      consumes:
      - application/json
      description: Retrieves a paginated list of users for a specific company
      parameters:
      - description: Company ID
        in: query
        name: company_id
        required: true
        type: integer
      - description: 'Limit (default: 20)'
        in: query
        name: limit
        type: integer
      - description: 'Offset (default: 0)'
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "400":
          description: Invalid company ID
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to fetch users
          schema:
            additionalProperties:
              type: string
            type: object
      summary: List users
      tags:
      - users
  /api/users/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a user by their unique ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid user ID
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to delete user
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Retrieves a user by their unique ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid user ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Updates an existing user's information
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User update payload
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid user ID or request body
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to update user
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update user
      tags:
      - users
  /projects:
    post:
      consumes:
      - application/json
      description: Creates a new project record in the system.
      parameters:
      - description: Project data
        in: body
        name: project
        required: true
        schema:
          $ref: '#/definitions/models.Project'
      produces:
      - application/json
      responses:
        "201":
          description: Project created successfully
          schema:
            $ref: '#/definitions/models.Project'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Failed to create project
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Create a new project
      tags:
      - Projects
  /projects/{id}:
    delete:
      description: Deletes a project by its ID.
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Project deleted successfully
        "400":
          description: Invalid project ID
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Failed to delete project
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Delete a project
      tags:
      - Projects
    get:
      description: Retrieves a project by its unique ID.
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Project found
          schema:
            $ref: '#/definitions/models.Project'
        "400":
          description: Invalid project ID
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Project not found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Get project by ID
      tags:
      - Projects
    put:
      consumes:
      - application/json
      description: Updates an existing project by its ID.
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated project data
        in: body
        name: project
        required: true
        schema:
          $ref: '#/definitions/models.Project'
      produces:
      - application/json
      responses:
        "200":
          description: Project updated successfully
          schema:
            $ref: '#/definitions/models.Project'
        "400":
          description: Invalid request body or project ID
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Failed to update project
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Update a project
      tags:
      - Projects
  /projects/user:
    get:
      description: Retrieves all projects associated with a specific user with pagination.
      parameters:
      - description: User ID
        in: query
        name: user_id
        required: true
        type: integer
      - description: 'Results limit (default: 20)'
        in: query
        name: limit
        type: integer
      - description: Results offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of projects
          schema:
            items:
              $ref: '#/definitions/models.Project'
            type: array
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Failed to fetch projects
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: List projects by user ID
      tags:
      - Projects
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
